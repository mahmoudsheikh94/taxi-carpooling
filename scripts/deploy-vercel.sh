#!/bin/bash

# üöÄ Vercel Deployment Automation Script
# This script automates the complete Vercel project setup and deployment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="taxi-carpooling"
PROJECT_DESCRIPTION="Modern taxi carpooling web application built with React, TypeScript, and Supabase"
FRAMEWORK="vite"

echo -e "${BLUE}üöÄ Starting Vercel Deployment Automation${NC}"
echo "================================================="

# Check if vercel CLI is installed
if ! command -v vercel &> /dev/null; then
    echo -e "${RED}‚ùå Vercel CLI is not installed${NC}"
    echo "Please install it first:"
    echo "  npm install -g vercel"
    echo "  # or"
    echo "  yarn global add vercel"
    exit 1
fi

# Check if user is authenticated with Vercel
if ! vercel whoami &> /dev/null; then
    echo -e "${YELLOW}üîê Please authenticate with Vercel first${NC}"
    echo "Running: vercel login"
    vercel login
fi

echo -e "${GREEN}‚úÖ Vercel CLI authenticated${NC}"

# Get Vercel user/team info
VERCEL_USER=$(vercel whoami 2>/dev/null || echo "unknown")
echo -e "${BLUE}üìù Vercel User: $VERCEL_USER${NC}"

# Check if project already exists
echo -e "${BLUE}üîç Checking if Vercel project exists...${NC}"
if vercel list | grep -q "$PROJECT_NAME"; then
    echo -e "${YELLOW}‚ö†Ô∏è  Vercel project '$PROJECT_NAME' already exists${NC}"
    read -p "Do you want to continue with existing project? (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Deployment cancelled${NC}"
        exit 1
    fi
    PROJECT_EXISTS=true
else
    PROJECT_EXISTS=false
fi

# Link or create project
if [ "$PROJECT_EXISTS" = false ]; then
    echo -e "${BLUE}üì¶ Creating new Vercel project...${NC}"
    # Initialize Vercel project
    vercel --confirm --name "$PROJECT_NAME"
    echo -e "${GREEN}‚úÖ Vercel project created and linked${NC}"
else
    echo -e "${BLUE}üîó Linking to existing Vercel project...${NC}"
    vercel link --confirm
    echo -e "${GREEN}‚úÖ Linked to existing Vercel project${NC}"
fi

# Function to add environment variable
add_env_var() {
    local env_name=$1
    local env_description=$2
    local is_required=${3:-true}
    local env_type=${4:-"encrypted"}  # encrypted, plain, or system
    
    if [ "$is_required" = true ]; then
        echo -e "${YELLOW}Required: $env_name${NC} - $env_description"
    else
        echo -e "${BLUE}Optional: $env_name${NC} - $env_description"
    fi
    
    read -p "Enter value for $env_name (or press Enter to skip): " -s env_value
    echo
    
    if [ -n "$env_value" ]; then
        # Add environment variable to all environments (production, preview, development)
        vercel env add "$env_name" production <<< "$env_value"
        vercel env add "$env_name" preview <<< "$env_value"
        vercel env add "$env_name" development <<< "$env_value"
        echo -e "${GREEN}‚úÖ Environment variable $env_name added to all environments${NC}"
    else
        if [ "$is_required" = true ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Skipped required environment variable $env_name${NC}"
        else
            echo -e "${BLUE}‚ÑπÔ∏è  Skipped optional environment variable $env_name${NC}"
        fi
    fi
}

# Set up environment variables
echo -e "${BLUE}üîê Setting up environment variables...${NC}"
echo "You'll need to provide the following environment variables:"

# Required environment variables
echo -e "\n${BLUE}=== Required Environment Variables ===${NC}"
add_env_var "VITE_SUPABASE_URL" "Your Supabase project URL (e.g., https://xxx.supabase.co)"
add_env_var "VITE_SUPABASE_ANON_KEY" "Your Supabase anonymous key"
add_env_var "VITE_GOOGLE_MAPS_API_KEY" "Your Google Maps API key"
add_env_var "VITE_APP_URL" "Your production app URL (will be auto-generated by Vercel)"

# Optional environment variables
echo -e "\n${BLUE}=== Optional Environment Variables ===${NC}"
add_env_var "VITE_SENTRY_DSN" "Your Sentry DSN for error tracking" false
add_env_var "VITE_GA_MEASUREMENT_ID" "Your Google Analytics measurement ID" false
add_env_var "SENTRY_ORG" "Your Sentry organization" false
add_env_var "SENTRY_PROJECT" "Your Sentry project name" false
add_env_var "SENTRY_AUTH_TOKEN" "Your Sentry auth token" false

# System environment variables (auto-managed by Vercel)
echo -e "\n${BLUE}=== System Environment Variables (Auto-managed) ===${NC}"
echo -e "${GREEN}‚úÖ VERCEL_URL - Automatically provided by Vercel${NC}"
echo -e "${GREEN}‚úÖ VERCEL_GIT_COMMIT_SHA - Automatically provided by Vercel${NC}"
echo -e "${GREEN}‚úÖ NODE_ENV - Automatically set to 'production'${NC}"

# Configure project settings
echo -e "${BLUE}‚öôÔ∏è  Configuring project settings...${NC}"

# Set up project settings via vercel.json (already exists)
if [ -f "vercel.json" ]; then
    echo -e "${GREEN}‚úÖ Using existing vercel.json configuration${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No vercel.json found, creating basic configuration...${NC}"
    cat > vercel.json << EOF
{
  "framework": "vite",
  "buildCommand": "npm run build:vercel && npm run type-check",
  "outputDirectory": "dist",
  "installCommand": "npm install",
  "regions": ["iad1"],
  "env": {
    "NODE_ENV": "production"
  }
}
EOF
    echo -e "${GREEN}‚úÖ Basic vercel.json created${NC}"
fi

# Deploy to preview first
echo -e "${BLUE}üöÄ Deploying to preview environment...${NC}"
PREVIEW_URL=$(vercel --confirm 2>&1 | grep -o 'https://[^[:space:]]*' | tail -1)

if [ -n "$PREVIEW_URL" ]; then
    echo -e "${GREEN}‚úÖ Preview deployment successful!${NC}"
    echo -e "${BLUE}Preview URL: $PREVIEW_URL${NC}"
    
    # Wait for user confirmation before production deployment
    echo -e "\n${YELLOW}Please test the preview deployment before proceeding to production.${NC}"
    echo -e "${BLUE}Preview URL: $PREVIEW_URL${NC}"
    read -p "Continue with production deployment? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        # Deploy to production
        echo -e "${BLUE}üöÄ Deploying to production...${NC}"
        PRODUCTION_URL=$(vercel --prod --confirm 2>&1 | grep -o 'https://[^[:space:]]*' | tail -1)
        
        if [ -n "$PRODUCTION_URL" ]; then
            echo -e "${GREEN}‚úÖ Production deployment successful!${NC}"
            echo -e "${BLUE}Production URL: $PRODUCTION_URL${NC}"
        else
            echo -e "${RED}‚ùå Production deployment failed${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}‚è∏Ô∏è  Production deployment skipped${NC}"
        PRODUCTION_URL="Not deployed"
    fi
else
    echo -e "${RED}‚ùå Preview deployment failed${NC}"
    exit 1
fi

# Set up domains (optional)
echo -e "\n${BLUE}üåê Domain Configuration${NC}"
read -p "Do you want to add a custom domain? (y/n): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    read -p "Enter your custom domain (e.g., taxi-carpooling.com): " CUSTOM_DOMAIN
    if [ -n "$CUSTOM_DOMAIN" ]; then
        echo -e "${BLUE}üîó Adding custom domain...${NC}"
        if vercel domains add "$CUSTOM_DOMAIN" --confirm; then
            echo -e "${GREEN}‚úÖ Custom domain added: $CUSTOM_DOMAIN${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  Make sure to update your DNS records to point to Vercel${NC}"
        else
            echo -e "${RED}‚ùå Failed to add custom domain${NC}"
        fi
    fi
fi

# Health check
echo -e "\n${BLUE}üè• Running deployment health check...${NC}"

# Function to check URL health
check_url_health() {
    local url=$1
    local name=$2
    
    echo -e "${BLUE}Checking $name: $url${NC}"
    
    if curl -s --max-time 10 "$url" > /dev/null; then
        echo -e "${GREEN}‚úÖ $name is responding${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $name is not responding${NC}"
        return 1
    fi
}

# Check preview and production URLs
if [ -n "$PREVIEW_URL" ] && [ "$PREVIEW_URL" != "Not deployed" ]; then
    check_url_health "$PREVIEW_URL" "Preview deployment"
fi

if [ -n "$PRODUCTION_URL" ] && [ "$PRODUCTION_URL" != "Not deployed" ]; then
    check_url_health "$PRODUCTION_URL" "Production deployment"
    
    # Check specific endpoints
    check_url_health "$PRODUCTION_URL/api/health.json" "Health endpoint"
fi

# Generate project information
echo -e "\n${BLUE}üìä Getting project information...${NC}"
PROJECT_INFO=$(vercel project ls 2>/dev/null | grep "$PROJECT_NAME" || echo "Project info not available")

# Generate deployment summary
echo -e "\n${GREEN}üéâ Vercel Deployment Complete!${NC}"
echo "================================================="
echo -e "${BLUE}Project Name:${NC} $PROJECT_NAME"
echo -e "${BLUE}Framework:${NC} $FRAMEWORK"
echo -e "${BLUE}Vercel User:${NC} $VERCEL_USER"

if [ -n "$PREVIEW_URL" ] && [ "$PREVIEW_URL" != "Not deployed" ]; then
    echo -e "${BLUE}Preview URL:${NC} $PREVIEW_URL"
fi

if [ -n "$PRODUCTION_URL" ] && [ "$PRODUCTION_URL" != "Not deployed" ]; then
    echo -e "${BLUE}Production URL:${NC} $PRODUCTION_URL"
fi

if [ -n "$CUSTOM_DOMAIN" ]; then
    echo -e "${BLUE}Custom Domain:${NC} https://$CUSTOM_DOMAIN"
fi

echo -e "\n${YELLOW}Next Steps:${NC}"
echo "1. üß™ Test your application thoroughly on both preview and production"
echo "2. üîê Verify all environment variables are set correctly"
echo "3. üì± Test the PWA functionality on mobile devices"
echo "4. üöÄ Set up monitoring and analytics"
echo "5. üìä Configure Vercel Analytics (optional)"
echo "6. üîÑ Set up GitHub integration for automatic deployments"

echo -e "\n${BLUE}Vercel Dashboard:${NC} https://vercel.com/dashboard"
echo -e "${BLUE}Project Settings:${NC} https://vercel.com/$VERCEL_USER/$PROJECT_NAME/settings"

echo -e "\n${BLUE}Deployment Features Enabled:${NC}"
echo "‚úÖ Automatic HTTPS with SSL certificates"
echo "‚úÖ Global CDN with edge caching"
echo "‚úÖ Automatic preview deployments for PRs"
echo "‚úÖ Built-in analytics and performance monitoring"
echo "‚úÖ Security headers and CSP configuration"
echo "‚úÖ PWA support with service worker"
echo "‚úÖ Environment variable management"

# Create deployment info file
cat > .vercel-deployment-info.json << EOF
{
  "project": "$PROJECT_NAME",
  "framework": "$FRAMEWORK",
  "vercelUser": "$VERCEL_USER",
  "previewUrl": "$PREVIEW_URL",
  "productionUrl": "$PRODUCTION_URL",
  "customDomain": "${CUSTOM_DOMAIN:-""}",
  "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")",
  "deploymentStatus": "completed"
}
EOF

echo -e "\n${GREEN}Deployment information saved to .vercel-deployment-info.json${NC}"
echo -e "\n${GREEN}Vercel deployment completed successfully! üéâ${NC}"